#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('iotserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//MongoDB 접속
var mongoDB = require("mongodb").MongoClient;
var url = "mongodb://127.0.0.1:27017/IoTProject";
var dbObj = null;
mongoDB.connect(url, function(err, db){
	dbObj = db;
	console.log("DB Connect......");
})

/*
 * Connect MQTT server & Read sensor data
 */

var mqtt = require("mqtt");
var client = mqtt.connect("mqtt://192.168.0.3"); //Server에 연결 시도

client.on("connect", function(){ // connect Event
	client.subscribe("tmp"); // 온도 Topic 구독
	client.subscribe("dcb");
});

client.on("message", function(topic, message){ // message Event
	console.log(topic + ":" + message.toString());
	
	var obj = JSON.parse(message);
	obj.create_at = new Date();
	console.log(obj);
	
	//MongoDB에 센서 데이터 저장
	if(topic == "tmp") {
		var temperature = dbObj.collection("temperature");
		temperature.save(obj, function(err, result){
			if(err)
				console.log(err);
			else
				console.log(JSON.stringify(result)); //{"n":1,"ok":1}
		});
	} else if(topic == "dcb") {
		var deciBel = dbObj.collection("deciBel");
		deciBel.save(obj, function(err, result){
			if(err)
				console.log(err);
			else
				console.log(JSON.stringify(result));
		});
	}
});


// 소켓을 이용한 통신 방법
var io = require("socket.io")(server);
io.on("connection", function(socket){
	socket.on("socket_evt_temp", function(data){
		var temp = dbObj.collection("temperature"); // MQTT.html 의 data.temp
		temp.find({}).sort({_id:-1}).limit(1).toArray(function(err, results){
			//테이블 값 정렬 후 하나의 데이터를 배열형태로 가져옴
			if(!err){
				socket.emit("socket_evt_temp", JSON.stringify(results[0]));
				//에러나지 않을 경우 JSON형식 문자열로 3000포트로 전송
			}
		});
	});
	socket.on("socket_evt_decibel", function(data){
		var decibel = dbObj.collection("deciBel");
		decibel.find({}).sort({_id:-1}).limit(1).toArray(function(err, results){
			if(!err){
				socket.emit("socket_evt_decibel", JSON.stringify(results[0]));
			}
		});
	});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
